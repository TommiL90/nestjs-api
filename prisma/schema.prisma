// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

enum Role {
  User
  Admin
  Employee
}

model User {
  id        String   @id
  name      String   @db.VarChar(120)
  email     String   @unique @db.VarChar(120)
  password  String?  @db.VarChar(120)
  role      Role     @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?
  pet     Pet[]
  memory  Memory[]
  task    Task[]
  Order   Order?

  @@map("users")
}

model Address {
  id         String   @id
  zipCode    String
  state      String
  city       String
  street     String
  number     String
  complement String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
  @@map("addresses")
}

enum Type {
  Cat
  Dog
}

enum Status {
  Available
  Adopted
}

enum Gender {
  Female
  Male
}

model Pet {
  id          String      @id
  name        String      @db.VarChar(120)
  type        Type
  species     String      @db.VarChar(120)
  gender      Gender
  age         String      @db.VarChar(120)
  description String      @db.Text()
  status      Status      @default(Available)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Images      ImagesPet[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
  @@map("pets")
}

model ImagesPet {
  id     String @id
  imgUrl String @db.Text()
  pet    Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId  String @unique
}

enum OrdersStatus {
  Created
  Running
  Done
  Failure
}

model Order {
  id        String       @id
  status    OrdersStatus @default(Created)
  paid      Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  products ProductOrder[]

  @@map("orders")
}

model Product {
  id          String   @id
  name        String   @db.VarChar(120)
  description String   @db.Text()
  price       Float
  stock       Int
  categoryId  String
  sku         String   @unique
  imgUrl      String?  @db.Text()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category[]
  orders   ProductOrder[]

  @@map("products")
}

model Category {
  id        String   @id
  name      String   @db.VarChar(120)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model ProductOrder {
  id        String @id
  productId String
  orderId   String

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@map("products_orders")
}

model Memory {
  id          String   @id
  title       String   @db.VarChar(120)
  description String   @db.Text()
  coverImage  String?  @db.Text()
  createdAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([userId])
  @@map("memories")
}

model Task {
  id          String   @id
  title       String   @db.VarChar(120)
  description String   @db.Text()
  completed   Boolean  @default(false)
  createdAt   DateTime
  updatedAt   DateTime @updatedAt()
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([userId])
  @@map("tasks")
}
